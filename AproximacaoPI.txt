.data 
pi:      .double 3.14
quatro:  .double 4.0
tres:    .double 3.0
zero:    .double 0

.code

    l.d f6, zero($zero)         ; f6 inicializado como 0.0
    l.d f4, tres($zero)         ; f4 inicializado como 3.0

    addi $s0, $zero, 0          ; somador inicializado como 0

    l.d f2, quatro($zero)       ; f2 inicializado como 4.0

    addi $s3, $zero, 1          ; variável para o loop
    addi $s4, $zero, 2          ; primeiro número para a soma
    addi $s5, $zero, 3          ; segundo número para a soma
    addi $s6, $zero, 2          ; incrementador para o loop

    addi $t8, $zero, 0          ; contador do loo
    addi $t9,$zero, 10          ; limite do loop, carregando 10.0

for:
    mult $s4, $s5               ; multiplica s4 e s5
    mflo $t0                     ; move a parte inferior do resultado para t0
    
    mult $t0, $s6                ; multiplica o resultado por s6
    mflo $t1                     ; move a parte inferior do resultado para t1

    DMTC1 $t1, f1               ; move t1 para o registrador de ponto flutuante f1
    CVT.D.L f1, f1               ; converte inteiro para double

    div.d f3, f2, f1            ; f3 = f2 / f1 (4.0 / f1)

    add.d f8, f6, f3            ; f8 = f6 + f3 (soma acumulada)

    ; Incrementar os valores para a próxima iteração

    addi $s4, $s4, 2            ; incrementa s4 em 2
    addi $s5, $s5, 2            ; incrementa s5 em 2
    addi $s6, $s6, 2            ; incrementa s6 em 2   

    addi $t8, $t8, 1            ; incrementa o contador do loop
   
    BNE $t8, $t9, for           ; se t8 não for igual a t9, volta para o loop
    BEQ $t8,$t9, FIM

FIM:

   

    ; Sair do programa
    addi $v0, $zero, 10         ; código da syscall para sair
    syscall 0                  ; sai do programa
